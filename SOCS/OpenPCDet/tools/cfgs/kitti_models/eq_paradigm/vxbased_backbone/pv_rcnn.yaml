CLASS_NAMES: ['Car', 'Pedestrian', 'Cyclist']

DATA_CONFIG:
    _BASE_CONFIG_: cfgs/dataset_configs/kitti_dataset.yaml
    DATA_AUGMENTOR:
        DISABLE_AUG_LIST: ['placeholder']
        AUG_CONFIG_LIST:
            - NAME: gt_sampling
              USE_ROAD_PLANE: True
              DB_INFO_PATH:
                  - kitti_dbinfos_train.pkl
              PREPARE: {
                 filter_by_min_points: ['Car:5', 'Pedestrian:5', 'Cyclist:5'],
                 filter_by_difficulty: [-1],
              }

              SAMPLE_GROUPS: ['Car:15','Pedestrian:10', 'Cyclist:10']
              NUM_POINT_FEATURES: 4
              DATABASE_WITH_FAKELIDAR: False
              REMOVE_EXTRA_WIDTH: [0.0, 0.0, 0.0]
              LIMIT_WHOLE_SCENE: False

            - NAME: random_world_flip
              ALONG_AXIS_LIST: ['x']

            - NAME: random_world_rotation
              WORLD_ROT_ANGLE: [-0.78539816, 0.78539816]

            - NAME: random_world_scaling
              WORLD_SCALE_RANGE: [0.95, 1.05]

MODEL:
    NAME: PVRCNN

    VFE:
        NAME: MeanVFE

    BACKBONE_3D:
        # Same as OpenPCDet.VoxelBackbone8x.
        # with some code refactoring for similar code structure for support producers.
        NAME: EQVoxelBackbone
        INIT_CONV_CFG:
            conv_type: subm
            out_channels: 16
            kernel_size: 3
            indice_key: init_conv
            stride: 1
            padding: 0
        BACKBONE_CFG:
            # conv1, conv2, conv3, conv4, conv5 (target output), conv6 (for providing bev feature map).
            block_types: [
                [ 'default_block' ],
                [ 'default_block', 'default_block', 'default_block' ],
                [ 'default_block', 'default_block', 'default_block' ],
                [ 'default_block', 'default_block', 'default_block' ],
                [ 'default_block' ],
                [ 'default_block' ],
            ]
            out_channels: [ 16, 32, 64, 64, 128, 256 ]
            conv_type: [ 'subm', 'spconv', 'spconv', 'spconv', 'spconv', 'spconv' ]
            kernel_size: [ 3, 3, 3, 3, [ 3, 1, 1 ], [2, 3, 3] ]
            stride: [ 1, 2, 2, 2, [ 2, 1, 1 ], 2 ]
            padding: [ 1, 1, 1, [ 0, 1, 1 ], 0, [0, 1, 1] ]
        ENCODED_SPCONV_TENSOR_KEY: conv5

    MAP_TO_BEV:
        NAME: HeightCompression
        NUM_BEV_FEATURES: 256

    BACKBONE_2D:
        NAME: BaseBEVBackbone

        LAYER_NUMS: [5, 5]
        LAYER_STRIDES: [1, 2]
        NUM_FILTERS: [128, 256]
        UPSAMPLE_STRIDES: [1, 2]
        NUM_UPSAMPLE_FILTERS: [256, 256]

    DENSE_HEAD:
        NAME: AnchorHeadSingle
        CLASS_AGNOSTIC: False

        USE_DIRECTION_CLASSIFIER: True
        DIR_OFFSET: 0.78539
        DIR_LIMIT_OFFSET: 0.0
        NUM_DIR_BINS: 2

        ANCHOR_GENERATOR_CONFIG: [
            {
                'class_name': 'Car',
                'anchor_sizes': [[3.9, 1.6, 1.56]],
                'anchor_rotations': [0, 1.57],
                'anchor_bottom_heights': [-1.78],
                'align_center': False,
                'feature_map_stride': 8,
                'matched_threshold': 0.6,
                'unmatched_threshold': 0.45
            },
            {
                'class_name': 'Pedestrian',
                'anchor_sizes': [[0.8, 0.6, 1.73]],
                'anchor_rotations': [0, 1.57],
                'anchor_bottom_heights': [-0.6],
                'align_center': False,
                'feature_map_stride': 8,
                'matched_threshold': 0.5,
                'unmatched_threshold': 0.35
            },
            {
                'class_name': 'Cyclist',
                'anchor_sizes': [[1.76, 0.6, 1.73]],
                'anchor_rotations': [0, 1.57],
                'anchor_bottom_heights': [-0.6],
                'align_center': False,
                'feature_map_stride': 8,
                'matched_threshold': 0.5,
                'unmatched_threshold': 0.35
            }
        ]

        TARGET_ASSIGNER_CONFIG:
            NAME: AxisAlignedTargetAssigner
            POS_FRACTION: -1.0
            SAMPLE_SIZE: 512
            NORM_BY_NUM_EXAMPLES: False
            MATCH_HEIGHT: False
            BOX_CODER: ResidualCoder

        LOSS_CONFIG:
            LOSS_WEIGHTS: {
                'cls_weight': 1.0,
                'loc_weight': 2.0,
                'dir_weight': 0.2,
                'code_weights': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
            }

    NECK:
        NAME: QNetNeck

        SUPPORT_CFG:
            PREPROCESSING_FUNC: _preprocess_voxel_support_features
            # stride 4; stride 8; bev w. stride 16.
            SUPPORT_KEYS: [ 'x_conv3', 'x_conv4', 'x_conv6' ]
            x_conv6:
              VOXEL_SIZE: [0.8, 0.8, 4]

        QUERY_POSITION_CFG:
            SELECTION_FUNCTION: _get_keypoints_query_position
            KEYPOINTS_SRC: raw_points
            KEYPOINTS_SAMPLE_METHOD: FPS
            KEYPOINTS_NUM: 2048

        # /path/to/your/qnet.yaml
        QNET_CFG_FILE: cfgs/kitti_models/eq_paradigm/vxbased_backbone/qnet.yaml
        QNET_CFG:
            SUPPORT_FEATURE_PROCESSOR:
                FEATURES_SOURCE: ['x_conv3', 'x_conv4', 'x_conv6']
                INPUT_CHANNELS: [64, 64, 256]
                MAX_VALID_NUM: 10000
                TARGET_CHANNEL: 48
            Q_DIM_FEEDFORWARD_PER_LEVEL: 192  # 48 * 4
            CRPE_CONFIG:
              QUANTIZE_SIZE: 0.1
            AUX_LOSS_CHANNEL: None
            MERGING_MLP: [144]  # 48 * 3
            Q_TARGET_CHANNEL: 128

        QUERY_FEATURE_CFG:
            POSTPROCESSING_FUNC: _process_keypoints_query_features

    POINT_HEAD:
        COUNT: 2
        USE_POINT_FEATURES_BEFORE_FUSION: True
        NUM_POINT_FEATURES_BEFORE_FUSION: 144  # 48 * 3 = 144
        POINT_HEAD_LIST:
            - NAME: PointHeadSimple
              CLS_FC: [ 256, 256 ]
              CLASS_AGNOSTIC: True
              USE_POINT_FEATURES_BEFORE_FUSION: True
              TARGET_CONFIG:
                  GT_EXTRA_WIDTH: [ 0.2, 0.2, 0.2 ]
              LOSS_CONFIG:
                  LOSS_REG: smooth-l1
                  LOSS_WEIGHTS: {
                      'point_cls_weight': 1.0,
                  }

            - NAME: PointHeadAuxLoss

              POINT_COORDS_KEY: query_positions
              POINT_FEATURE_KEY: aux_query_features

              # aux gt mapping.
              TARGET_ASSIGNMENT_CFG:
                  GT_EXTRA_WIDTH: [ 0.2, 0.2, 0.2 ]
              AUX_SUPERVISION_CFG:
                  QUERY_NUM: -1  # no aux sub-sampling.
                  POS_RATIO: 0.5
                  HARDNEG_RATIO: 0.5
                  HARDNEG_WIDTH: [ 1.0, 1.0, 100 ]

              # set auxiliary loss weight, 3 layers * 3 levels.
              AUX_LOSS_WEIGHT: [ 0.125, 0.125, 0.125,
                                 0.125, 0.125, 0.125,
                                 0.125, 0.125, 0.125, ]
              INPUT_CHANNELS: 48
              CLS_FC: [ 64, 64 ]
              REG_FC: [ 64, 64 ]
              CLASS_AGNOSTIC: True
              LOSS_CONFIG:
                  LOSS_WEIGHTS: {
                      'aux_cls_weight': 1.0,
                      'aux_reg_weight': 1.0,
                  }

    ROI_HEAD:
        NAME: PVRCNNHead
        CLASS_AGNOSTIC: True

        SHARED_FC: [256, 256]
        CLS_FC: [256, 256]
        REG_FC: [256, 256]
        DP_RATIO: 0.3

        NMS_CONFIG:
            TRAIN:
                NMS_TYPE: nms_gpu
                MULTI_CLASSES_NMS: False
                NMS_PRE_MAXSIZE: 9000
                NMS_POST_MAXSIZE: 512
                NMS_THRESH: 0.8
            TEST:
                NMS_TYPE: nms_gpu
                MULTI_CLASSES_NMS: False
                NMS_PRE_MAXSIZE: 1024
                NMS_POST_MAXSIZE: 100
                NMS_THRESH: 0.7

        ROI_GRID_POOL:
            GRID_SIZE: 6
            MLPS: [[64, 64], [64, 64]]
            POOL_RADIUS: [0.8, 1.6]
            NSAMPLE: [16, 16]
            POOL_METHOD: max_pool

        TARGET_CONFIG:
            BOX_CODER: ResidualCoder
            ROI_PER_IMAGE: 128
            FG_RATIO: 0.5

            SAMPLE_ROI_BY_EACH_CLASS: True
            CLS_SCORE_TYPE: roi_iou

            CLS_FG_THRESH: 0.75
            CLS_BG_THRESH: 0.25
            CLS_BG_THRESH_LO: 0.1
            HARD_BG_RATIO: 0.8

            REG_FG_THRESH: 0.55

        LOSS_CONFIG:
            CLS_LOSS: BinaryCrossEntropy
            REG_LOSS: smooth-l1
            CORNER_LOSS_REGULARIZATION: True
            LOSS_WEIGHTS: {
                'rcnn_cls_weight': 1.0,
                'rcnn_reg_weight': 1.0,
                'rcnn_corner_weight': 1.0,
                'code_weights': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
            }

    POST_PROCESSING:
        RECALL_THRESH_LIST: [0.3, 0.5, 0.7]
        SCORE_THRESH: 0.5
        OUTPUT_RAW_SCORE: False

        EVAL_METRIC: kitti

        NMS_CONFIG:
            MULTI_CLASSES_NMS: False
            NMS_TYPE: nms_gpu
            NMS_THRESH: 0.1
            NMS_PRE_MAXSIZE: 4096
            NMS_POST_MAXSIZE: 500


OPTIMIZATION:
    BATCH_SIZE_PER_GPU: 4
    NUM_EPOCHS: 80

    OPTIMIZER: adam_onecycle
    LR: 0.01
    WEIGHT_DECAY: 0.01
    MOMENTUM: 0.9

    MOMS: [0.95, 0.85]
    PCT_START: 0.4
    DIV_FACTOR: 10
    DECAY_STEP_LIST: [35, 45]
    LR_DECAY: 0.1
    LR_CLIP: 0.0000001

    LR_WARMUP: False
    WARMUP_EPOCH: 1

    GRAD_NORM_CLIP: 10
